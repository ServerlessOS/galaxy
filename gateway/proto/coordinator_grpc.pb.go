// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: coordinator.proto

package gateway_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoordinatorClient is the client API for Coordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorClient interface {
	AddNodeInfo(ctx context.Context, in *NodeInfoUpdate, opts ...grpc.CallOption) (*CoordinatorReply, error)
	AddSchedulerInfo(ctx context.Context, in *SchedulerInfoUpdate, opts ...grpc.CallOption) (*CoordinatorReply, error)
	AddDispatcherInfo(ctx context.Context, in *DispatcherInfoUpdate, opts ...grpc.CallOption) (*CoordinatorReply, error)
	GatewayRegister(ctx context.Context, in *GatewayRegisterReq, opts ...grpc.CallOption) (*GatewayRegisterResp, error)
}

type coordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorClient(cc grpc.ClientConnInterface) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) AddNodeInfo(ctx context.Context, in *NodeInfoUpdate, opts ...grpc.CallOption) (*CoordinatorReply, error) {
	out := new(CoordinatorReply)
	err := c.cc.Invoke(ctx, "/dispatcher.coordinator/AddNodeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) AddSchedulerInfo(ctx context.Context, in *SchedulerInfoUpdate, opts ...grpc.CallOption) (*CoordinatorReply, error) {
	out := new(CoordinatorReply)
	err := c.cc.Invoke(ctx, "/dispatcher.coordinator/AddSchedulerInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) AddDispatcherInfo(ctx context.Context, in *DispatcherInfoUpdate, opts ...grpc.CallOption) (*CoordinatorReply, error) {
	out := new(CoordinatorReply)
	err := c.cc.Invoke(ctx, "/dispatcher.coordinator/AddDispatcherInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) GatewayRegister(ctx context.Context, in *GatewayRegisterReq, opts ...grpc.CallOption) (*GatewayRegisterResp, error) {
	out := new(GatewayRegisterResp)
	err := c.cc.Invoke(ctx, "/dispatcher.coordinator/GatewayRegister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorServer is the server API for Coordinator service.
// All implementations should embed UnimplementedCoordinatorServer
// for forward compatibility
type CoordinatorServer interface {
	AddNodeInfo(context.Context, *NodeInfoUpdate) (*CoordinatorReply, error)
	AddSchedulerInfo(context.Context, *SchedulerInfoUpdate) (*CoordinatorReply, error)
	AddDispatcherInfo(context.Context, *DispatcherInfoUpdate) (*CoordinatorReply, error)
	GatewayRegister(context.Context, *GatewayRegisterReq) (*GatewayRegisterResp, error)
}

// UnimplementedCoordinatorServer should be embedded to have forward compatible implementations.
type UnimplementedCoordinatorServer struct {
}

func (UnimplementedCoordinatorServer) AddNodeInfo(context.Context, *NodeInfoUpdate) (*CoordinatorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNodeInfo not implemented")
}
func (UnimplementedCoordinatorServer) AddSchedulerInfo(context.Context, *SchedulerInfoUpdate) (*CoordinatorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSchedulerInfo not implemented")
}
func (UnimplementedCoordinatorServer) AddDispatcherInfo(context.Context, *DispatcherInfoUpdate) (*CoordinatorReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDispatcherInfo not implemented")
}
func (UnimplementedCoordinatorServer) GatewayRegister(context.Context, *GatewayRegisterReq) (*GatewayRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GatewayRegister not implemented")
}

// UnsafeCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorServer will
// result in compilation errors.
type UnsafeCoordinatorServer interface {
	mustEmbedUnimplementedCoordinatorServer()
}

func RegisterCoordinatorServer(s grpc.ServiceRegistrar, srv CoordinatorServer) {
	s.RegisterService(&Coordinator_ServiceDesc, srv)
}

func _Coordinator_AddNodeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeInfoUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).AddNodeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcher.coordinator/AddNodeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).AddNodeInfo(ctx, req.(*NodeInfoUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_AddSchedulerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SchedulerInfoUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).AddSchedulerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcher.coordinator/AddSchedulerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).AddSchedulerInfo(ctx, req.(*SchedulerInfoUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_AddDispatcherInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DispatcherInfoUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).AddDispatcherInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcher.coordinator/AddDispatcherInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).AddDispatcherInfo(ctx, req.(*DispatcherInfoUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_GatewayRegister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).GatewayRegister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dispatcher.coordinator/GatewayRegister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).GatewayRegister(ctx, req.(*GatewayRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Coordinator_ServiceDesc is the grpc.ServiceDesc for Coordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dispatcher.coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddNodeInfo",
			Handler:    _Coordinator_AddNodeInfo_Handler,
		},
		{
			MethodName: "AddSchedulerInfo",
			Handler:    _Coordinator_AddSchedulerInfo_Handler,
		},
		{
			MethodName: "AddDispatcherInfo",
			Handler:    _Coordinator_AddDispatcherInfo_Handler,
		},
		{
			MethodName: "GatewayRegister",
			Handler:    _Coordinator_GatewayRegister_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coordinator.proto",
}
