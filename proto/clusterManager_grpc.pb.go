// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: clusterManager.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClusterManagerClient is the client API for ClusterManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterManagerClient interface {
	MoniterUpload(ctx context.Context, in *MoniterUploadReq, opts ...grpc.CallOption) (*MoniterUploadResp, error)
}

type clusterManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterManagerClient(cc grpc.ClientConnInterface) ClusterManagerClient {
	return &clusterManagerClient{cc}
}

func (c *clusterManagerClient) MoniterUpload(ctx context.Context, in *MoniterUploadReq, opts ...grpc.CallOption) (*MoniterUploadResp, error) {
	out := new(MoniterUploadResp)
	err := c.cc.Invoke(ctx, "/ClusterManager.ClusterManager/MoniterUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterManagerServer is the server API for ClusterManager service.
// All implementations should embed UnimplementedClusterManagerServer
// for forward compatibility
type ClusterManagerServer interface {
	MoniterUpload(context.Context, *MoniterUploadReq) (*MoniterUploadResp, error)
}

// UnimplementedClusterManagerServer should be embedded to have forward compatible implementations.
type UnimplementedClusterManagerServer struct {
}

func (UnimplementedClusterManagerServer) MoniterUpload(context.Context, *MoniterUploadReq) (*MoniterUploadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoniterUpload not implemented")
}

// UnsafeClusterManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterManagerServer will
// result in compilation errors.
type UnsafeClusterManagerServer interface {
	mustEmbedUnimplementedClusterManagerServer()
}

func RegisterClusterManagerServer(s grpc.ServiceRegistrar, srv ClusterManagerServer) {
	s.RegisterService(&ClusterManager_ServiceDesc, srv)
}

func _ClusterManager_MoniterUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoniterUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagerServer).MoniterUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClusterManager.ClusterManager/MoniterUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagerServer).MoniterUpload(ctx, req.(*MoniterUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterManager_ServiceDesc is the grpc.ServiceDesc for ClusterManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClusterManager.ClusterManager",
	HandlerType: (*ClusterManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MoniterUpload",
			Handler:    _ClusterManager_MoniterUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "clusterManager.proto",
}
