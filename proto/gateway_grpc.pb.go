// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: gateway.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	UpdateGatewayList(ctx context.Context, in *UpdateListReq, opts ...grpc.CallOption) (*UpdateListResp, error)
	UpdateDispatcherList(ctx context.Context, in *UpdateListReq, opts ...grpc.CallOption) (*UpdateListResp, error)
	UpdateFuncManagerList(ctx context.Context, in *UpdateListReq, opts ...grpc.CallOption) (*UpdateListResp, error)
	GetFuncInfo(ctx context.Context, in *GetFuncInfoReq, opts ...grpc.CallOption) (*GetFuncInfoResp, error)
	Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error)
	MoniterUpload(ctx context.Context, in *MoniterUploadReq, opts ...grpc.CallOption) (*MoniterUploadResp, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) UpdateGatewayList(ctx context.Context, in *UpdateListReq, opts ...grpc.CallOption) (*UpdateListResp, error) {
	out := new(UpdateListResp)
	err := c.cc.Invoke(ctx, "/gateway_rpc.Gateway/UpdateGatewayList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateDispatcherList(ctx context.Context, in *UpdateListReq, opts ...grpc.CallOption) (*UpdateListResp, error) {
	out := new(UpdateListResp)
	err := c.cc.Invoke(ctx, "/gateway_rpc.Gateway/UpdateDispatcherList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) UpdateFuncManagerList(ctx context.Context, in *UpdateListReq, opts ...grpc.CallOption) (*UpdateListResp, error) {
	out := new(UpdateListResp)
	err := c.cc.Invoke(ctx, "/gateway_rpc.Gateway/UpdateFuncManagerList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) GetFuncInfo(ctx context.Context, in *GetFuncInfoReq, opts ...grpc.CallOption) (*GetFuncInfoResp, error) {
	out := new(GetFuncInfoResp)
	err := c.cc.Invoke(ctx, "/gateway_rpc.Gateway/GetFuncInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) Register(ctx context.Context, in *RegisterReq, opts ...grpc.CallOption) (*RegisterResp, error) {
	out := new(RegisterResp)
	err := c.cc.Invoke(ctx, "/gateway_rpc.Gateway/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) MoniterUpload(ctx context.Context, in *MoniterUploadReq, opts ...grpc.CallOption) (*MoniterUploadResp, error) {
	out := new(MoniterUploadResp)
	err := c.cc.Invoke(ctx, "/gateway_rpc.Gateway/MoniterUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations should embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	UpdateGatewayList(context.Context, *UpdateListReq) (*UpdateListResp, error)
	UpdateDispatcherList(context.Context, *UpdateListReq) (*UpdateListResp, error)
	UpdateFuncManagerList(context.Context, *UpdateListReq) (*UpdateListResp, error)
	GetFuncInfo(context.Context, *GetFuncInfoReq) (*GetFuncInfoResp, error)
	Register(context.Context, *RegisterReq) (*RegisterResp, error)
	MoniterUpload(context.Context, *MoniterUploadReq) (*MoniterUploadResp, error)
}

// UnimplementedGatewayServer should be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) UpdateGatewayList(context.Context, *UpdateListReq) (*UpdateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGatewayList not implemented")
}
func (UnimplementedGatewayServer) UpdateDispatcherList(context.Context, *UpdateListReq) (*UpdateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDispatcherList not implemented")
}
func (UnimplementedGatewayServer) UpdateFuncManagerList(context.Context, *UpdateListReq) (*UpdateListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateFuncManagerList not implemented")
}
func (UnimplementedGatewayServer) GetFuncInfo(context.Context, *GetFuncInfoReq) (*GetFuncInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFuncInfo not implemented")
}
func (UnimplementedGatewayServer) Register(context.Context, *RegisterReq) (*RegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGatewayServer) MoniterUpload(context.Context, *MoniterUploadReq) (*MoniterUploadResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MoniterUpload not implemented")
}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_UpdateGatewayList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateGatewayList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway_rpc.Gateway/UpdateGatewayList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateGatewayList(ctx, req.(*UpdateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateDispatcherList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateDispatcherList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway_rpc.Gateway/UpdateDispatcherList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateDispatcherList(ctx, req.(*UpdateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_UpdateFuncManagerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).UpdateFuncManagerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway_rpc.Gateway/UpdateFuncManagerList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).UpdateFuncManagerList(ctx, req.(*UpdateListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_GetFuncInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFuncInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).GetFuncInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway_rpc.Gateway/GetFuncInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).GetFuncInfo(ctx, req.(*GetFuncInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway_rpc.Gateway/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).Register(ctx, req.(*RegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_MoniterUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MoniterUploadReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).MoniterUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gateway_rpc.Gateway/MoniterUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).MoniterUpload(ctx, req.(*MoniterUploadReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway_rpc.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateGatewayList",
			Handler:    _Gateway_UpdateGatewayList_Handler,
		},
		{
			MethodName: "UpdateDispatcherList",
			Handler:    _Gateway_UpdateDispatcherList_Handler,
		},
		{
			MethodName: "UpdateFuncManagerList",
			Handler:    _Gateway_UpdateFuncManagerList_Handler,
		},
		{
			MethodName: "GetFuncInfo",
			Handler:    _Gateway_GetFuncInfo_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Gateway_Register_Handler,
		},
		{
			MethodName: "MoniterUpload",
			Handler:    _Gateway_MoniterUpload_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gateway.proto",
}
