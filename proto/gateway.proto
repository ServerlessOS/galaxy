syntax = "proto3";
option go_package = "./;proto";
package gateway_rpc;

service Gateway {
  rpc UpdateGatewayList(UpdateListReq)returns(UpdateListResp){}
  rpc UpdateDispatcherList(UpdateListReq)returns(UpdateListResp){}
  rpc UpdateFuncManagerList(UpdateListReq)returns(UpdateListResp){}
  rpc GetFuncInfo(GetFuncInfoReq)returns(GetFuncInfoResp){}
  rpc Register(RegisterReq)returns(RegisterResp){}//所有注册请求先找gateway，若不包含地址则gateway主动从rpc中取出地址，由gateway转发到顶层控制器，顶层控制器的地址需要在启动时告诉gateway
  rpc MoniterUpload(MoniterUploadReq)returns(MoniterUploadResp){}
}
message UpdateListReq {
  enum OperationType {
    APPEND = 0;
    REDUCE = 1;
    OVERRIDE = 2;
  }

  OperationType type = 1; // 操作类型 追加/减少/覆盖
  map<string, string> list = 2;; // 列表name/address
}
message RegisterReq{
  enum RegisterType {
    gateway = 0;
    funcManager = 1;
    dispatcher  = 2;
    scheduler  = 3;
    node  = 4;
  }
  RegisterType type = 1;
  string name = 2;
  string address = 3;//当模块联系gateway时，地址可以为空也可以存在，当gateway转发顶层控制器时，自动填充地址
}
message RegisterResp{
  int64 statusCode = 1;
  string customInformation = 2; //不同的注册可以返回不同的信息
}
message UpdateListResp{
  int64 statusCode = 1;
  string description = 2;
}
message GetFuncInfoReq{
  string funcName = 1;
}
message GetFuncInfoResp{
  int64 statusCode = 1;
  string funcInfo = 2;
}
message MoniterUploadReq{
  enum Type {
    gateway = 0;
    funcManager = 1;
    dispatcher  = 2;
    scheduler  = 3;
    node  = 4;
  }
  Type type = 1;
  string name = 2;
  string address = 3;
  string performance=4;//将cpu负载等数据聚合到一条string中
}
message MoniterUploadResp{
  int64 statusCode = 1;
}