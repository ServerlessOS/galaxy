syntax = "proto3";

option go_package = "./;scheduler_rpc";
package scheduler;

service Scheduler {
    rpc Schedule(ScheduleRequestList) returns (ScheduleReply){}
    rpc UpdateNodeResource(NodeResourceUpdate) returns(NodeResourceReply){}
    rpc PeerSchedule(ScheduleRequest) returns (ScheduleReply){}
    rpc PeerSchedulerUpdate(PeerSchedulersUpdate) returns (PeerSchedulersUpdateReply){}
}

message PeerSchedulerInfo{
    string NodeName = 1;
    string Address = 2;
}
message PeerSchedulersUpdate{
    repeated PeerSchedulerInfo List = 1;
    string Action = 2;
}

message PeerSchedulersUpdateReply{
    int64 State = 1;
}

message NodeResource{
    string nodeName = 1;
    int64 haveCpu = 2;
    int64 haveMem = 3;
    string address = 4;
    string port = 5;
}
message NodeResourceUpdate{
    repeated NodeResource list = 1;
    string Action = 2;
    string SourceAddr = 3;
    string TargetAddr = 4;
}
message NodeResourceReply{
    int64 state = 1;
}
message ScheduleRequestList{
    repeated ScheduleRequest list = 1;
}

message ScheduleRequest {
    int64 requestId = 1;
    string funcName = 2;
    int64 requireCpu = 3;
    int64 requireMem = 4;
    string dispatcherAddr = 5;
}

message ScheduleReply {
    int64 requestId = 1;
    string funcName = 2;
    string deployPosition = 3;
}
